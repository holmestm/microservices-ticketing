import request from 'supertest';
import { app } from '../../app';
import { Order } from '../../models/orders';
import { natsWrapper } from '../../nats-wrapper';
import { Subjects, OrderStatus } from '@gravitaz/common';
import { Types as MongooseTypes } from 'mongoose';
import { Payment } from '../../models/payments';

const mockCreate = jest.fn().mockResolvedValue({ id: 'StripeCharge_123' });
console.log(mockCreate);
jest.mock('../../stripe', function () {
  return jest.fn().mockImplementation((key, params) => {
    return {
      charges: {
        create: mockCreate,
      },
    };
  });
});

it('returns a 201 with valid inputs and creates a valid stripe charge with mock', async () => {
  const orderId = new MongooseTypes.ObjectId().toHexString();
  const user = {
    id: new MongooseTypes.ObjectId().toHexString(),
    email: 'test@test.com',
  };
  const price = Math.floor(Math.random() * 100000);

  // create a fake order
  const order = Order.build({
    id: orderId,
    version: 0,
    status: OrderStatus.Created,
    userId: user.id,
    price: price,
  });
  await order.save();

  await request(app)
    .post('/api/payments')
    .set('Cookie', global.signin(user))
    .send({ orderId: orderId, token: 'tok_visa' })
    .expect(201);

  /*
    const chargeOptions = mockCreate.mock.calls[0][0];
  expect(chargeOptions.source).toEqual('tok_visa');
  expect(chargeOptions.amount).toEqual(order.price * 100);
  expect(chargeOptions.currency).toEqual('gbp');

  const payment = await Payment.findOne({ orderId });
  expect(payment).not.toBeNull();
*/
});
